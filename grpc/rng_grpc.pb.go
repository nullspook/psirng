// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RngClient is the client API for Rng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RngClient interface {
	RandBooleans(ctx context.Context, in *RandBooleansRequest, opts ...grpc.CallOption) (*RandBooleansResponse, error)
	RandBytes(ctx context.Context, in *RandBytesRequest, opts ...grpc.CallOption) (*RandBytesResponse, error)
	RandIntegers(ctx context.Context, in *RandIntegersRequest, opts ...grpc.CallOption) (*RandIntegersResponse, error)
	RandUniform(ctx context.Context, in *RandUniformRequest, opts ...grpc.CallOption) (*RandUniformResponse, error)
	RandNormal(ctx context.Context, in *RandNormalRequest, opts ...grpc.CallOption) (*RandNormalResponse, error)
}

type rngClient struct {
	cc grpc.ClientConnInterface
}

func NewRngClient(cc grpc.ClientConnInterface) RngClient {
	return &rngClient{cc}
}

func (c *rngClient) RandBooleans(ctx context.Context, in *RandBooleansRequest, opts ...grpc.CallOption) (*RandBooleansResponse, error) {
	out := new(RandBooleansResponse)
	err := c.cc.Invoke(ctx, "/psirng.Rng/RandBooleans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rngClient) RandBytes(ctx context.Context, in *RandBytesRequest, opts ...grpc.CallOption) (*RandBytesResponse, error) {
	out := new(RandBytesResponse)
	err := c.cc.Invoke(ctx, "/psirng.Rng/RandBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rngClient) RandIntegers(ctx context.Context, in *RandIntegersRequest, opts ...grpc.CallOption) (*RandIntegersResponse, error) {
	out := new(RandIntegersResponse)
	err := c.cc.Invoke(ctx, "/psirng.Rng/RandIntegers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rngClient) RandUniform(ctx context.Context, in *RandUniformRequest, opts ...grpc.CallOption) (*RandUniformResponse, error) {
	out := new(RandUniformResponse)
	err := c.cc.Invoke(ctx, "/psirng.Rng/RandUniform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rngClient) RandNormal(ctx context.Context, in *RandNormalRequest, opts ...grpc.CallOption) (*RandNormalResponse, error) {
	out := new(RandNormalResponse)
	err := c.cc.Invoke(ctx, "/psirng.Rng/RandNormal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RngServer is the server API for Rng service.
// All implementations must embed UnimplementedRngServer
// for forward compatibility
type RngServer interface {
	RandBooleans(context.Context, *RandBooleansRequest) (*RandBooleansResponse, error)
	RandBytes(context.Context, *RandBytesRequest) (*RandBytesResponse, error)
	RandIntegers(context.Context, *RandIntegersRequest) (*RandIntegersResponse, error)
	RandUniform(context.Context, *RandUniformRequest) (*RandUniformResponse, error)
	RandNormal(context.Context, *RandNormalRequest) (*RandNormalResponse, error)
	mustEmbedUnimplementedRngServer()
}

// UnimplementedRngServer must be embedded to have forward compatible implementations.
type UnimplementedRngServer struct {
}

func (UnimplementedRngServer) RandBooleans(context.Context, *RandBooleansRequest) (*RandBooleansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandBooleans not implemented")
}
func (UnimplementedRngServer) RandBytes(context.Context, *RandBytesRequest) (*RandBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandBytes not implemented")
}
func (UnimplementedRngServer) RandIntegers(context.Context, *RandIntegersRequest) (*RandIntegersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandIntegers not implemented")
}
func (UnimplementedRngServer) RandUniform(context.Context, *RandUniformRequest) (*RandUniformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandUniform not implemented")
}
func (UnimplementedRngServer) RandNormal(context.Context, *RandNormalRequest) (*RandNormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandNormal not implemented")
}
func (UnimplementedRngServer) mustEmbedUnimplementedRngServer() {}

// UnsafeRngServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RngServer will
// result in compilation errors.
type UnsafeRngServer interface {
	mustEmbedUnimplementedRngServer()
}

func RegisterRngServer(s *grpc.Server, srv RngServer) {
	s.RegisterService(&_Rng_serviceDesc, srv)
}

func _Rng_RandBooleans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandBooleansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).RandBooleans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/psirng.Rng/RandBooleans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).RandBooleans(ctx, req.(*RandBooleansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rng_RandBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).RandBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/psirng.Rng/RandBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).RandBytes(ctx, req.(*RandBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rng_RandIntegers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandIntegersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).RandIntegers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/psirng.Rng/RandIntegers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).RandIntegers(ctx, req.(*RandIntegersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rng_RandUniform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandUniformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).RandUniform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/psirng.Rng/RandUniform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).RandUniform(ctx, req.(*RandUniformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rng_RandNormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandNormalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).RandNormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/psirng.Rng/RandNormal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).RandNormal(ctx, req.(*RandNormalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "psirng.Rng",
	HandlerType: (*RngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandBooleans",
			Handler:    _Rng_RandBooleans_Handler,
		},
		{
			MethodName: "RandBytes",
			Handler:    _Rng_RandBytes_Handler,
		},
		{
			MethodName: "RandIntegers",
			Handler:    _Rng_RandIntegers_Handler,
		},
		{
			MethodName: "RandUniform",
			Handler:    _Rng_RandUniform_Handler,
		},
		{
			MethodName: "RandNormal",
			Handler:    _Rng_RandNormal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rng.proto",
}
